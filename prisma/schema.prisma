


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id  String  @id @default(cuid())
  email String @unique
  username String?
  password String
  role Role @default(USER)
  isVerified Boolean @default(false)
  verificationToken        String?
  verificationTokenExpiry  DateTime?
  passwordResetToken       String?
  passwordResetExpiry      DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic profile info
  firstName String?
  lastName String?

  refreshTokens RefreshToken[]
  
  // Project Management Relations
  ownedProjects Project[] @relation("ProjectOwner")
  projectMembers ProjectMember[]
  assignedTasks Task[]
  createdTasks Task[] @relation("TaskCreator")

  @@map("users")
}

model RefreshToken {
    id  String  @id @default(cuid())
    token String @unique
    userId String 
    isRevoked Boolean  @default(false)
    expiresAt DateTime
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@map("refresh_tokens")
}

// Projects
model Project {
  id String @id @default(cuid())
  name String
  description String?
  status ProjectStatus @default(ACTIVE)
  ownerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members ProjectMember[]
  tasks Task[]

  @@map("projects")
}

model ProjectMember {
  id String @id @default(cuid())
  projectId String
  userId String
  role ProjectRole @default(MEMBER)
  joinedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// Tasks
model Task {
  id String @id @default(cuid())
  title String
  description String?
  status TaskStatus @default(TODO)
  priority TaskPriority @default(MEDIUM)
  
  projectId String
  assigneeId String?
  creatorId String
  
  dueDate DateTime?
  completedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User? @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  creator User @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

// Enums
enum Role {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ProjectRole {
  OWNER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
